#!/bin/bash
#
# /etc/rc.d/init.d/ut
#
# chkconfig: - 24 76
# description: Attach/Detach ut mount points
#

# Source function library.
. /etc/init.d/functions

UT=/usr/sbin/ut
UTTAB=/etc/uttab

# Check to make sure we have the needed files
[ -x ${UT} ] || exit 0
[ -s ${UTTAB} ] || exit 0

retval=0

start() {
    echo -e $"Starting ut: \n"

    modprobe nbd max_part=5
    let retval+=$?

    while read dev uuid interface; do
        [ -z "$dev" -o "${dev#\#}" != "$dev" ] && continue

        if [ "${uuid#UUID=}" != "$uuid" -o "${#uuid}" == "36" ]
        then
        uuid="${uuid#UUID=}"
        else
        uuid=$($UT listall | grep -F -w "${uuid#LABEL=}" | awk '{print $1}')
        fi

        #if fuser -0 -k $dev >/dev/null 2>&1
        #then
        #echo "$dev already attached!";
        #continue
        #fi

        echo -e "dev: $dev  uuid: ${uuid#LABEL=}  interface: $interface attached \n"

        args=""
        [ -n "$interface" ] && args="$args -d $interface"
        
        #attach devices 
        $UT $args attach $uuid $dev
        
        #disable scheduler
       
	echo none > /sys/block/$(basename $dev)/queue/scheduler
		
        let retval+=$?
    done < /etc/uttab

    [ "$retval" -eq 0 ] && success $"Starting ut: " || failure $"Starting ut: "
    echo

    return $retval
}

stop() {
    echo -n $"Shutting down ut: "
    sync
    killall ut

    while read dev uuid interface; do
        [ -z "$dev" -o "${dev#\#}" != "$dev" ] && continue

        pid_in_use=$(fuser -0 $dev | awk '{print $1}')
        if [ ${#pid_in_use} -gt 0] ; then
           echo "file in use"
           kill $pid_in_use
        else
           echo "file not in use"
        fi

        let retval+=$?
    done < /etc/uttab
    echo -e "\n"
    echo -e "rmmod nbd : OK \n";
    rmmod nbd

    success $"Shutting down ut: "
    echo
}

case "$1" in
    start)
    start
    ;;
    stop)
    stop
    ;;
    status)
    ;;
    restart)
    stop
    start
    ;;
    reload)
    ;;
    *)
    echo "Usage: $0 {start|stop|status|reload|restart[|probe]"
    exit 1
    ;;
esac

exit $?
